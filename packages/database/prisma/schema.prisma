// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String @id @default(cuid())
  email       String @unique
  username    String @unique
  token       String?
  firstname   String
  lastname    String
  password    String
  createdAt   DateTime  @default(now())
  role        userRole  @default(USER)
  contestSubmissions  ContestSubmission[]
  Submission      Submission[]
  contestPoints   ContestPoints[]
}

model Contest {
  id                 String              @id @default(cuid())
  title              String
  description        String
  startTime          DateTime
  hidden             Boolean             @default(true)
  submissions        Submission[]
  endTime            DateTime
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  problems           ContestProblem[]
  contestSubmissions ContestSubmission[]
  leaderboard        Boolean             @default(false)
}

model ContestProblem {
    id          String @id @default(cuid())
    contestId   String
    problemId   String
    createdat   DateTime  @default(now())
    updateAt    DateTime @updatedAt
    contest     Contest  @relation(fields: [contestId], references: [id])
    problem     Problem  @relation(fields: [problemId], references: [id])
    index       Int
    solved      Int    @default(0)

    @@unique([contestId, problemId])
}

model Problem {
  id          String       @id @default(cuid())
  title       String
  description String
  hidden      Boolean      @default(true)
  slug        String       @unique
  solved      Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime    @updatedAt
  Contest             ContestProblem[]
  Submissions         Submission[]
  ContestSubmissions  ContestSubmission[]
  defaultCode         DefaultCode[]
  difficulty          Difficulty @default(MEDIUM)
}

model DefaultCode {
  id            String    @id @default(cuid())
  languageId    Int
  problemId     String
  code          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  problem       Problem @relation(fields: [problemId], references: [id])
  langauge      Language @relation(fields: [languageId], references: [id])

  @@unique([problemId, languageId])

}

model Submission {
  id              String   @id @default(cuid())
  problemId       String
  userId          String
  code            String
  activeContestId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime? @updatedAt
  status          SubmissionResult  @default(PENDING)
  memory          Int?
  time            Float?
  activeContest   Contest?   @relation(fields: [activeContestId], references: [id])
  user            User       @relation(fields: [userId], references: [id])
  problem         Problem    @relation(fields: [problemId], references: [id])    
}


model Language {
  id            Int       @id @default(autoincrement())
  name          String
  judfe0id      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  defaultcode   DefaultCode[]

}

model ContestSubmission {
  id              String    @id @default(cuid())
  userId          String
  problemId       String
  contestId       String
  submissionid    String
  points          Int
  user            User  @relation(fields: [userId], references: [id])
  problem         Problem @relation(fields: [problemId], references: [id])
  contest         Contest @relation(fields: [contestId], references: [id])
  @@unique([userId, contestId, problemId])

}

model ContestPoints {
  id          String @id @default(cuid())
  contestId   String
  userId      String
  points      Int
  rank        Int
  user        User @relation(fields: [userId], references: [id])
  @@unique([contestId, userId])
}

enum SubmissionResult {
  AC
  REJECTED
  PENDING
}
enum userRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}


