generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  username           String              @unique
  firstname          String
  lastname           String
  email              String              @unique
  password           String
  createdAt          DateTime            @default(now())
  role               userRole            @default(USER)
  token              String?
  contestPoints      ContestPoints[]
  contestSubmissions ContestSubmission[]
  Submission         Submission[]
}

model Contest {
  id                 String              @id @default(cuid())
  title              String
  description        String
  startTime          DateTime
  hidden             Boolean             @default(true)
  endTime            DateTime
  createdAt          DateTime            @default(now())
  leaderboard        Boolean             @default(false)
  updatedAt          DateTime            @updatedAt
  problems           ContestProblem[]
  contestSubmissions ContestSubmission[]
  submissions        Submission[]
}

model ContestProblem {
  id        String   @id @default(cuid())
  contestId String
  createdat DateTime @default(now())
  updateAt  DateTime @updatedAt
  index     Int
  solved    Int      @default(0)
  problemId String
  contest   Contest  @relation(fields: [contestId], references: [id])
  problem   Problem  @relation(fields: [problemId], references: [id])

  @@unique([contestId, problemId])
}

model Problem {
  id                 String              @id @default(cuid())
  title              String
  description        String
  hidden             Boolean             @default(true)
  slug               String              @unique
  solved             Int                 @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  difficulty         Difficulty          @default(MEDIUM)
  Contest            ContestProblem[]
  ContestSubmissions ContestSubmission[]
  defaultCode        DefaultCode[]
  Submissions        Submission[]
}

model DefaultCode {
  id         String   @id @default(cuid())
  languageId Int
  problemId  String
  code       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  language   Language @relation(fields: [languageId], references: [id]) // Fixed typo
  problem    Problem  @relation(fields: [problemId], references: [id])

  @@unique([problemId, languageId])
}

model Language {
  id          Int           @id @default(autoincrement())
  name        String
  judge0Id    Int           @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  DefaultCode DefaultCode[]
}

model Submission {
  id              String           @id @default(cuid())
  problemId       String
  userId          String
  code            String
  activeContestId String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  status          SubmissionResult @default(PENDING)
  memory          Int?
  time            Float?
  activeContest   Contest?         @relation(fields: [activeContestId], references: [id])
  problem         Problem          @relation(fields: [problemId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
  testcases       submissions[]
}



model ContestSubmission {
  id           String  @id @default(cuid())
  userId       String
  problemId    String
  contestId    String
  submissionid String
  points       Int
  contest      Contest @relation(fields: [contestId], references: [id])
  problem      Problem @relation(fields: [problemId], references: [id])
  user         User    @relation(fields: [userId], references: [id])

  @@unique([userId, contestId, problemId])
}

model ContestPoints {
  id        String @id @default(cuid())
  contestId String
  userId    String
  points    Int
  rank      Int
  user      User   @relation(fields: [userId], references: [id])

  @@unique([contestId, userId])
}

model ar_internal_metadata {
  key        String   @id @db.VarChar
  value      String?  @db.VarChar
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
}

model Languages {
  id          Int      @id @default(autoincrement())
  name        String?  @db.VarChar
  compile_cmd String?  @db.VarChar
  rum_cmd     String?  @db.VarChar
  source_file String?  @db.VarChar
  is_archived Boolean? @default(false)
}

model submissions {
  id                                         Int         @id @default(autoincrement())
  source_code                                String?
  language_id                                Int?
  stdin                                      String?
  expected_output                            String?
  stdout                                     String?
  status_id                                  Int?
  created_at                                 DateTime?   @db.Timestamp(6)
  finished_at                                DateTime?   @db.Timestamp(6)
  time                                       Decimal?    @db.Decimal
  memory                                     Int?
  stderr                                     String?
  token                                      String?     @unique @db.VarChar
  number_of_runs                             Int?
  cpu_time_limit                             Decimal?    @db.Decimal
  cpu_extra_time                             Decimal?    @db.Decimal
  wall_time_limit                            Decimal?    @db.Decimal
  memory_limit                               Int?
  stack_limit                                Int?
  max_processes_and_or_threads               Int?
  enable_per_process_and_thread_time_limit   Boolean?
  enable_per_process_and_thread_memory_limit Boolean?
  max_file_size                              Int?
  compile_output                             String?
  exit_code                                  Int?
  exit_signal                                Int?
  message                                    String?
  wall_time                                  Decimal?    @db.Decimal
  compiler_options                           String?     @db.VarChar
  command_line_arguments                     String?     @db.VarChar
  redirect_stderr_to_stdout                  Boolean?
  callback_url                               String?     @db.VarChar
  additional_files                           Bytes?
  enable_network                             Boolean?
  submissionId                               String?
  Submission                                 Submission? @relation(fields: [submissionId], references: [id])

  @@index([token], map: "index_submissions_on_token")
}

enum SubmissionResult {
  AC
  REJECTED
  PENDING
}

enum userRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
